# docker-compose.yml

version: "3.9"

services:
  db:
    image: postgres:15.1-alpine
    container_name: postgres-smit
    restart: on-failure
    environment:
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      PGUSER: "${POSTGRES_USER}"
    ports:
     - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 1s
      timeout: 1s
      retries: 3

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: smit_api
    restart: on-failure
    env_file:
      - .env
    environment:
      POSTGRES_HOST: db
      KAFKA_HOST: kafka
      PYTHONPATH: "${PYTHONPATH}:src"
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    entrypoint: uvicorn src.app:app --reload --workers 1 --host 0.0.0.0 --port 8000

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:${KAFKA_PORT},PLAINTEXT_HOST://localhost:29092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "${KAFKA_TOPIC}:1:1"
      ALLOW_PLAINTEXT_LISTENER: "yes"
    healthcheck:
      test: nc -z localhost 29092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

networks:
  default:
      name: lan_smit
